<?xml version="1.0" encoding="UTF-8"?>
<draft href="WEBCL_debug_info/">
  <name>WEBCL_debug_info</name>

  <contact> <a href="https://www.khronos.org/webcl/public-mailing-list/">WebCL
  working group</a> (public_webcl 'at' khronos.org) </contact>

  <contributors>
    <contributor>Steven Eliuk, Samsung Electronics,</contributor>
    <contributor>Tomi Aarnio, Nokia Research,</contributor>
    <contributor>Members of the WebCL working group.</contributor>
  </contributors>

  <number>6</number>

  <depends>
    <api version="1.0"/>
  </depends>

  <overview>
    
    <script src="../../resources/jquery-1.3.2.min.js" type="text/javascript">do not remove this text</script>
    <script src="../../resources/preprocessHTML.js" type="text/javascript">do not remove this text</script>

    <p>There are some info-items that are hidden in WebCL 1.0 core specification because they could be misused to target an application to a particular hardware / software configurations or share info of the hosting device. As per <a href="http://www.w3.org/TR/api-perms/"> W3C Permissions for Device API Access Specification</a> access to private, or sensitive data from the hosting device, are meant to be discoverable, as well as disabled, or enabled, on a site-by-site, or application-by-application basis, depending on the security context <a href="http://www.w3.org/TR/api-perms/"> [0]</a>. For these reasons, it is advised that an implementation request permission from the user to expose this information, but ultimately this behavior is left up to the discretion of the implementation.</p> The <code>WEBCL_debug_info</code> extension allows the exposure of additional properties that are hidden in the WebCL 1.0 core specification. There is the ability to query for this info at the <code> WebCLPlatform &amp; WebCLDevice </code> levels through the <code> getInfo(CLenum name) </code> API.<p> The original enums, i.e. <code>PLATFORM_NAME, PLATFORM_VENDOR, etc</code> can infact be queried without first enabling this extension but are not guaranteed to return useful information. Most browsers will probably return a placeholder value, but some may return the true underlying value from OpenCL.</p>
    <features>
      <feature>
        Allows applications to query additional properties. Given that they are optionally visible, there is no
guarantee that the info is available if the extension is implemented. All the extension guarantees is at least one additional property / info item is available.
      </feature>
    </features>
[0] <a href="http://www.w3.org/TR/api-perms/"> http://www.w3.org/TR/api-perms/</a>
  </overview>

  <idl xml:space="preserve">

    partial interface WEBCL_debug_info {
      //Platform Properties  
      const CLenum UNMASKED_PLATFORM_NAME                             = 0x0902;
      const CLenum UNMASKED_PLATFORM_VENDOR                           = 0x0903;
      const CLenum UNMASKED_PLATFORM_EXTENSIONS                       = 0x0904;
      
      //Device Properties
      const CLenum UNMASKED_DEVICE_VENDOR_ID                          = 0x1001;
      const CLenum UNMASKED_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR        = 0x1006;
      const CLenum UNMASKED_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT       = 0x1007;
      const CLenum UNMASKED_DEVICE_PREFERRED_VECTOR_WIDTH_INT         = 0x1008;
      const CLenum UNMASKED_DEVICE_PREFERRED_VECTOR_WIDTH_LONG        = 0x1009;
      const CLenum UNMASKED_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT       = 0x100A;
      const CLenum UNMASKED_DEVICE_MAX_CLOCK_FREQUENCY                = 0x100C;
      const CLenum UNMASKED_DEVICE_NAME                               = 0x102B;
      const CLenum UNMASKED_DEVICE_VENDOR                             = 0x102C;
      const CLenum UNMASKED_DEVICE_VERSION                            = 0x102F;
      const CLenum UNMASKED_DEVICE_EXTENSIONS                         = 0x1030;
    };
  </idl>


  <issues>
    <ol>
      <li>
        <p>
         N/A
        </p>
      </li>
    </ol>
  </issues>

  <samplecode xml:space="preserve">
    <pre class="example">
      //example assumes extension has been correctly enabled
      //on platform or device

      //get platform level info
      if(isEnabledOnPlatform){
         var platformName = platform.getInfo(WebCL.UNMASKED_PLATFORM_NAME);
      }

      //get device level info
      if(isEnabledOnDevice){
         var maxFreq = device.getInfo(WebCL.UNMASKED_DEVICE_MAX_CLOCK_FREQUENCY);
      }
    </pre>
  </samplecode>

  <history>
    <revision date="2013/11/15">
      <change>Initial revision.</change>
    </revision>
  </history>
</draft>

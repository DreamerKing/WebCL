<?xml version="1.0" encoding="UTF-8"?>
<draft href="WEBCL_html_sharing/">
  <name>WEBCL_html_sharing</name>

  <contact> <a href="https://www.khronos.org/webcl/public-mailing-list/">WebCL
  working group</a> (public_webcl 'at' khronos.org) </contact>

  <contributors>
    <contributor>Steven Eliuk, Samsung Electronics,</contributor>
    <contributor>Tomi Aarnio, Nokia Research,</contributor>
    <contributor>Members of the WebCL working group.</contributor>
  </contributors>

  <number>4</number>

  <depends>
    <api version="1.0"/>
  </depends>

  <overview>
     <p>
      The HTML Resource Sharing extension makes it more convenient and
      potentially faster for applications to transfer image data from
      HTML Image / Canvas elements to WebCL memory objects, and
      vice versa.  The extension is enabled by
      calling <code>enableExtension("WEBCL_html_sharing")</code>, after
      which the application may call the functions specified below.
    </p>
    <features>
      <feature>
	WebCLBuffer and WebCLImage can be initialized at construction time from an ImageData, Canvas, or Image Element. This does not create a binding of any kind between the WebCL memory object and the data source. The source pixel format is treated as 32-bit RGBA (8-bits per component) with non-premultiplied alpha, regardless of the source.  
      </feature>
    </features>
  </overview>

  <idl xml:space="preserve">
    partial interface WebCLContext {
       WebCLBuffer createBuffer(CLenum memFlags, ImageData srcPixels);
       WebCLBuffer createBuffer(CLenum memFlags, HTMLCanvasElement srcCanvas);
       WebCLBuffer createBuffer(CLenum memFlags, HTMLImageElement srcImage);
       WebCLImage createImage(CLenum memFlags, ImageData srcPixels);
       WebCLImage createImage(CLenum memFlags, HTMLCanvasElement srcCanvas);
       WebCLImage createImage(CLenum memFlags, HTMLImageElement srcImage);
    };
    
    partial interface WebCLCommandQueue {

    //////////////////////////////////////////////////////////////////////
    //
    // Writing to WebCLBuffer
    //
    
    void enqueueWriteBuffer(
                    WebCLBuffer                           buffer,
                    CLboolean                             blockingWrite,
                    CLuint                                bufferOffset,
                    ImageData                             srcPixels,
                    optional sequence&lt;WebCLEvent&gt;?        eventWaitList,
                    optional WebCLEvent?                  event);

    void enqueueWriteBuffer(
                    WebCLBuffer                           buffer,
                    CLboolean                             blockingWrite,
                    CLuint                                bufferOffset,
                    HTMLCanvasElement                     srcCanvas,
                    optional sequence&lt;WebCLEvent&gt;?        eventWaitList,
                    optional WebCLEvent?                  event);

    void enqueueWriteBuffer(
                    WebCLBuffer                           buffer,
                    CLboolean                             blockingWrite,
                    CLuint                                bufferOffset,
                    HTMLImageElement                      srcImage,
                    optional sequence&lt;WebCLEvent&gt;?        eventWaitList,
                    optional WebCLEvent?                  event);

    void enqueueWriteBufferRect(
                    WebCLBuffer                           buffer,
                    CLboolean                             blockingWrite,
                    sequence&lt;CLuint&gt;                      bufferOrigin,
                    sequence&lt;CLuint&gt;                      srcOrigin,
                    sequence&lt;CLuint&gt;                      region,
                    CLuint                                bufferRowPitch,
                    CLuint                                bufferSlicePitch,
                    ImageData                             srcPixels,
                    optional sequence&lt;WebCLEvent&gt;?        eventWaitList,
                    optional WebCLEvent?                  event);

    void enqueueWriteBufferRect(
                    WebCLBuffer                           buffer,
                    CLboolean                             blockingWrite,
                    sequence&lt;CLuint&gt;                      bufferOrigin,
                    sequence&lt;CLuint&gt;                      srcOrigin,
                    sequence&lt;CLuint&gt;                      region,
                    CLuint                                bufferRowPitch,
                    CLuint                                bufferSlicePitch,
                    HTMLCanvasElement                     srcCanvas,
                    optional sequence&lt;WebCLEvent&gt;?        eventWaitList,
                    optional WebCLEvent?                  event);

    void enqueueWriteBufferRect(
                    WebCLBuffer                           buffer,
                    CLboolean                             blockingWrite,
                    sequence&lt;CLuint&gt;                      bufferOrigin,
                    sequence&lt;CLuint&gt;                      srcOrigin,
                    sequence&lt;CLuint&gt;                      region,
                    CLuint                                bufferRowPitch,
                    CLuint                                bufferSlicePitch,
                    HTMLImageElement                      srcImage,
                    optional sequence&lt;WebCLEvent&gt;?        eventWaitList,
                    optional WebCLEvent?                  event);

    //////////////////////////////////////////////////////////////////////
    //
    // Writing to WebCLImage
    //
    
    void enqueueWriteImage(
                    WebCLImage                            image,
                    CLboolean                             blockingWrite,
                    sequence&lt;CLuint&gt;                      origin,
                    sequence&lt;CLuint&gt;                      region,
                    ImageData                             srcPixels,
                    optional sequence&lt;WebCLEvent&gt;?        eventWaitList,
                    optional WebCLEvent?                  event);

    void enqueueWriteImage(
                    WebCLImage                            image,
                    CLboolean                             blockingWrite,
                    sequence&lt;CLuint&gt;                      origin,
                    sequence&lt;CLuint&gt;                      region,
                    HTMLCanvasElement                     srcCanvas,
                    optional sequence&lt;WebCLEvent&gt;?        eventWaitList,
                    optional WebCLEvent?                  event);

    void enqueueWriteImage(
                    WebCLImage                            image,
                    CLboolean                             blockingWrite,
                    sequence&lt;CLuint&gt;                      origin,
                    sequence&lt;CLuint&gt;                      region,
                    HTMLImageElement                      srcImage,
                    optional sequence&lt;WebCLEvent&gt;?        eventWaitList,
                    optional WebCLEvent?                  event);


    //////////////////////////////////////////////////////////////////////
    //
    // Reading from WebCL
    //

    void enqueueReadBuffer(
                    WebCLBuffer                           buffer,
                    CLboolean                             blockingRead,
                    CLuint                                bufferOffset,
                    CLuint                                numBytes,
                    HTMLCanvasElement                     dstCanvas,
                    optional sequence&lt;WebCLEvent&gt;?        eventWaitList,
                    optional WebCLEvent?                  event);

    void enqueueReadBufferRect(
                    WebCLBuffer                           buffer,
                    CLboolean                             blockingRead,
                    sequence&lt;CLuint&gt;                      bufferOrigin,
                    sequence&lt;CLuint&gt;                      dstOrigin,
                    sequence&lt;CLuint&gt;                      region,
                    CLuint                                bufferRowPitch,
                    CLuint                                bufferSlicePitch,
                    HTMLCanvasElement                     dstCanvas,
                    optional sequence&lt;WebCLEvent&gt;?        eventWaitList,
                    optional WebCLEvent?                  event);

    void enqueueReadImage(
                    WebCLImage                            image,
                    CLboolean                             blockingRead,
                    sequence&lt;CLuint&gt;                      origin,
                    sequence&lt;CLuint&gt;                      region,
                    HTMLCanvasElement                     dstCanvas,
                    optional sequence&lt;WebCLEvent&gt;?        eventWaitList,
                    optional WebCLEvent?                  event);
    };
  </idl>

  <newfun>
    <function name="createBuffer" type="WebCLBuffer">
      <param name="memFlags" type="CLenum"/>
      <param name="srcPixels" type="ImageData"/>
      Creates a new WebCLBuffer with size equal to <code>srcPixels.data.length</code>.
      <dl class="exceptions">
	 <dt>Exceptions:</dt>
	 <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
	 <li>`INVALID_VALUE` -- if `memFlags` is not `MEM_READ_WRITE`, `MEM_WRITE_ONLY`, or `MEM_READ_ONLY`</li>
	 <li>`INVALID_IMAGE_SIZE` -- if <code>srcPixels.data.length &gt; DEVICE_MAX_MEM_ALLOC_SIZE</code></li>
	 <li>`INVALID_HOST_PTR` -- if `srcPixels` has unknown length, or is otherwise not valid</li>
	 <li>`INVALID_HOST_PTR` -- if `srcPixels` object is not fully loaded</li>
       </dl>
    </function>

    <function name="createBuffer" type="WebCLBuffer">
      <param name="memFlags" type="CLenum"/>
      <param name="srcCanvas" type="HTMLCanvasElement"/>
      Creates a new WebCLBuffer with size equal to <code>srcCanvas.getContext("2d").getImageData().data.length</code>.
      <dl class="exceptions">
	 <dt>Exceptions:</dt>
	 <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
	 <li>`INVALID_VALUE` -- if `memFlags` is not `MEM_READ_WRITE`, `MEM_WRITE_ONLY`, or `MEM_READ_ONLY`</li>
	 <li>`INVALID_IMAGE_SIZE` -- if <code>srcCanvas.getContext("2d").getImageData().data.length &gt; DEVICE_MAX_MEM_ALLOC_SIZE</code></li>
	 <li>`INVALID_HOST_PTR` -- if `srcCanvas` has unknown lengths, or is otherwise not valid</li>
	 <li>`INVALID_HOST_PTR` -- if `srcCanvas` object is not fully loaded</li>
       </dl>
    </function>

    <function name="createBuffer" type="WebCLBuffer">
      <param name="memFlags" type="CLenum"/>
      <param name="srcImage" type="HTMLImageElement"/>
      Creates a new WebCLBuffer with size equal to <code>srcImage.width * srcImage.height * 4</code>.
      <dl class="exceptions">
	 <dt>Exceptions:</dt>
	 <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
	 <li>`INVALID_VALUE` -- if `memFlags` is not `MEM_READ_WRITE`, `MEM_WRITE_ONLY`, or `MEM_READ_ONLY`</li>
	 <li>`INVALID_IMAGE_SIZE` -- if <code>srcImage.width * srcImage.height * 4 &gt; DEVICE_MAX_MEM_ALLOC_SIZE</code></li>
	 <li>`INVALID_HOST_PTR` -- if `srcImage` has unknown lengths, or is otherwise not valid</li>
	 <li>`INVALID_HOST_PTR` -- if `srcImage` object is not fully loaded</li>
       </dl>
    </function>


    <function name="createImage" type="WebCLImage">
      <param name="memFlags" type="CLenum"/>
      <param name="descriptor" type="WebCLImageDescriptor"/>
      <param name="srcPixels" type="ImageData"/>
       A newly create WebCLImage will have <code>channelOrder</code> equal to <code>RGBA, channelType</code> equal to <code>UNORM_INT8</code>, and <code> width</code> and<code> height</code> equal to <code>srcPixels.width</code> and <code>srcPixels.height</code>. The <code>descriptor</code> can be used to specify the row pitch for storage.
       <dl class="exceptions">
	 <dt>Exceptions:</dt>
	 <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
	 <li>`INVALID_VALUE` -- if `memFlags` is not `MEM_READ_WRITE`, `MEM_WRITE_ONLY`, or `MEM_READ_ONLY`</li>
	 <li>`INVALID_IMAGE_SIZE` -- if <code>srcPixels.width &gt; DEVICE_IMAGE2D_MAX_WIDTH</code></li>
	 <li>`INVALID_IMAGE_SIZE` -- if <code>srcPixels.height &gt; DEVICE_IMAGE2D_MAX_HEIGHT</code></li>
	 <li>`INVALID_HOST_PTR` -- if `srcPixels` has unknown dimensions, or is otherwise not valid</li>
	 <li>`INVALID_IMAGE_FORMAT_DESCRIPTOR` -- if `descriptor.channelOrder` or `descriptor.channelType` 
	 is not valid</li>
	 <li>`IMAGE_FORMAT_NOT_SUPPORTED` -- if the given combination
	 of `channelOrder` and `channelType` is not supported for `srcPixels`</li>
	 <li>`INVALID_HOST_PTR` -- if `srcPixels` object is not fully loaded</li>
       </dl>
    </function>

    <function name="createImage" type="WebCLImage">
      <param name="memFlags" type="CLenum"/>
      <param name="descriptor" type="WebCLImageDescriptor"/>
      <param name="srcCanvas" type="HTMLCanvasElement"/>
      A newly create WebCLImage will have <code>channelOrder</code> equal to <code>RGBA, channelType</code> equal to <code>UNORM_INT8</code>, and <code> width</code> and<code> height</code> equal to <code>srcCanvas.width</code> and <code>srcCanvas.height</code>. The <code>descriptor</code> can be used to specify the row pitch for storage.
       <dl class="exceptions">
	 <dt>Exceptions:</dt>
	 <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
	 <li>`INVALID_VALUE` -- if `memFlags` is not `MEM_READ_WRITE`, `MEM_WRITE_ONLY`, or `MEM_READ_ONLY`</li>
	 <li>`INVALID_IMAGE_SIZE` -- if <code>srcCanvas.width &gt; DEVICE_IMAGE2D_MAX_WIDTH</code></li>
	 <li>`INVALID_IMAGE_SIZE` -- if <code>srcCanvas.height &gt; DEVICE_IMAGE2D_MAX_HEIGHT</code></li>
	 <li>`INVALID_HOST_PTR` -- if `srcCanvas` has unknown dimensions, or is otherwise not valid</li>
	 <li>`INVALID_IMAGE_FORMAT_DESCRIPTOR` -- if `descriptor.channelOrder` or `descriptor.channelType` 
	 is not valid</li>
	 <li>`IMAGE_FORMAT_NOT_SUPPORTED` -- if the given combination
	 of `channelOrder` and `channelType` is not supported for `srcPixels`</li>
	  <li>`INVALID_HOST_PTR` -- if `srcCanvas` object is not fully loaded</li>
       </dl>
    </function>

    <function name="createImage" type="WebCLImage">
      <param name="memFlags" type="CLenum"/>
      <param name="descriptor" type="WebCLImageDescriptor"/>
      <param name="srcImage" type="HTMLImageElement"/>
      A newly create WebCLImage will have <code>channelOrder</code> equal to <code>RGBA, channelType</code> equal to <code>UNORM_INT8</code>, and <code> width</code> and<code> height</code> equal to <code>srcImage.width</code> and <code>srcImage.height</code>. The <code>descriptor</code> can be used to specify the row pitch for storage.
       <dl class="exceptions">
	 <dt>Exceptions:</dt>
	 <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
	 <li>`INVALID_VALUE` -- if `memFlags` is not `MEM_READ_WRITE`, `MEM_WRITE_ONLY`, or `MEM_READ_ONLY`</li>
	 <li>`INVALID_IMAGE_SIZE` -- if <code>srcImage.width &gt; DEVICE_IMAGE2D_MAX_WIDTH</code></li>
	 <li>`INVALID_IMAGE_SIZE` -- if <code>srcImage.height &gt; DEVICE_IMAGE2D_MAX_HEIGHT</code></li>
	 <li>`INVALID_HOST_PTR` -- if `srcImage` has unknown dimensions, or is otherwise not valid</li>
	 <li>`INVALID_IMAGE_FORMAT_DESCRIPTOR` -- if `descriptor.channelOrder` or `descriptor.channelType` 
	 is not valid</li>
	 <li>`IMAGE_FORMAT_NOT_SUPPORTED` -- if the given combination
	 of `channelOrder` and `channelType` is not supported for `srcPixels`</li>
	 <li>`INVALID_HOST_PTR` -- if `srcImage` object is not fully loaded</li>
       </dl>
    </function>

    <function name="enqueueWriteBuffer" type="void">
      <param name="buffer" type="WebCLBuffer"/>
      <param name="blockingWrite" type="CLboolean"/>
      <param name="bufferOffset" type="CLuint"/>
      <param name="srcPixels" type="ImageData"/>
      <param name="eventWaitList" type="Optional sequence&lt;WebCLEvent&gt;?"/>
      <param name="event" type="Optional WebCLEvent?"/>
      Enqueue commands to write the contents of <code>srcPixels</code> to <code>buffer</code>.
       <dl class="exceptions">
          <dt>Exceptions:</dt>
	  <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not
            associated with the same WebCLContext as `buffer`</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not
            associated with the same WebCLContext as all events in
            `eventWaitList`</li>
          <li>`INVALID_MEM_OBJECT` -- if `buffer` is not a valid
            WebCLBuffer object</li>
          <li>`INVALID_VALUE` -- if any part of the region being
            written, specified by `bufferOffset` and `srcPixels.data.length`, is
            out of bounds of `buffer`</li>
          <li>`INVALID_EVENT_WAIT_LIST` -- if any event in `eventWaitList` is invalid</li>
          <li>`EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST` -- if
            `blockingWrite` is `true` and the execution status of any
            event in `eventWaitList` is a negative integer value</li>
	    <li>`INVALID_HOST_PTR` -- if `srcPixels` object is not fully loaded</li>
        </dl>
    </function>
    
    <function name="enqueueWriteBuffer" type="void">
      <param name="buffer" type="WebCLBuffer"/>
      <param name="blockingWrite" type="CLboolean"/>
      <param name="bufferOffset" type="CLuint"/>
      <param name="srcCanvas" type="HTMLCanvasElement"/>
      <param name="eventWaitList" type="Optional sequence&lt;WebCLEvent&gt;?"/>
      <param name="event" type="Optional WebCLEvent?"/>
       Enqueue commands to write the contents of <code>srcCanvas</code> to <code>buffer</code>.
       <dl class="exceptions">
          <dt>Exceptions:</dt>
	  <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not
            associated with the same WebCLContext as `buffer`</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not
            associated with the same WebCLContext as all events in
            `eventWaitList`</li>
          <li>`INVALID_MEM_OBJECT` -- if `buffer` is not a valid
            WebCLBuffer object</li>
          <li>`INVALID_VALUE` -- if any part of the region being
            written, specified by `bufferOffset` and `srcCanvas.getContext("2d").getImageData().data.length`, is
            out of bounds of `buffer`</li>
          <li>`INVALID_EVENT_WAIT_LIST` -- if any event in `eventWaitList` is invalid</li>
          <li>`EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST` -- if
            `blockingWrite` is `true` and the execution status of any
            event in `eventWaitList` is a negative integer value</li>
	    <li>`INVALID_HOST_PTR` -- if `srcCanvas` object is not fully loaded</li>
        </dl>
    </function>

    <function name="enqueueWriteBuffer" type="void">
      <param name="buffer" type="WebCLBuffer"/>
      <param name="blockingWrite" type="CLboolean"/>
      <param name="bufferOffset" type="CLuint"/>
      <param name="srcImage" type="HTMLImageElement"/>
      <param name="eventWaitList" type="Optional sequence&lt;WebCLEvent&gt;?"/>
      <param name="event" type="Optional WebCLEvent?"/>
       Enqueue commands to write the contents of <code>srcImage</code> to <code>buffer</code>.
       <dl class="exceptions">
          <dt>Exceptions:</dt>
	  <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not
            associated with the same WebCLContext as `buffer`</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not
            associated with the same WebCLContext as all events in
            `eventWaitList`</li>
          <li>`INVALID_MEM_OBJECT` -- if `buffer` is not a valid
            WebCLBuffer object</li>
          <li>`INVALID_VALUE` -- if any part of the region being
            written, specified by `bufferOffset` and `srcImage.width * srcImage.height * 4`, is
            out of bounds of `buffer`</li>
          <li>`INVALID_EVENT_WAIT_LIST` -- if any event in `eventWaitList` is invalid</li>
          <li>`EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST` -- if
            `blockingWrite` is `true` and the execution status of any
            event in `eventWaitList` is a negative integer value</li>
	    <li>`INVALID_HOST_PTR` -- if `srcImage` object is not fully loaded</li>
        </dl>
    </function>

    <function name="enqueueWriteBufferRect" type="void">
      <param name="buffer" type="WebCLBuffer"/>
      <param name="blockingWrite" type="CLboolean"/>
      <param name="bufferOrigin" type="sequence&lt;CLuint&gt;"/>
      <param name="srcOrigin" type="sequence&lt;CLuint&gt;"/>
      <param name="region" type="sequence&lt;CLuint&gt;"/>
      <param name="bufferRowPitch" type="CLuint"/>
      <param name="srcPixels" type="ImageData"/>
      <param name="eventWaitList" type="Optional sequence&lt;WebCLEvent&gt;?"/>
      <param name="event" type="Optional WebCLEvent?"/>
      Enqueue commands to write a rectangular region to a <code>buffer</code> object from <code>srcPixels</code>.
       <dl class="exceptions">
          <dt>Exceptions:</dt>
	  <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not associated with the same WebCLContext as `buffer`</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not associated with the same WebCLContext as all events in `eventWaitList`</li>
          <li>`INVALID_MEM_OBJECT` -- if `buffer` is not a valid WebCLBuffer object</li>
          <li>`INVALID_VALUE` -- if `bufferOrigin`, `srcOrigin`, or
            `region` does not have exactly three elements</li>
          <li>`INVALID_VALUE` -- if any part of the region being written,
            specified by `bufferOrigin`, `region`, `bufferRowPitch` and
            `bufferSlicePitch`, is out of bounds of `buffer`</li>
          <li>`INVALID_VALUE` -- if any part of the region being
            read, specified by `srcOrigin`, `region`, is out of bounds of `srcPixels`</li>
          <li>`INVALID_EVENT_WAIT_LIST` -- if any event in `eventWaitList` is invalid</li>
          <li>`EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST` -- if
            `blockingWrite` is `true` and the execution status of any
            event in `eventWaitList` is a negative integer value</li>
	    <li>`INVALID_HOST_PTR` -- if `srcPixels` object is not fully loaded</li>
        </dl>
    </function>

    <function name="enqueueWriteBufferRect" type="void">
      <param name="buffer" type="WebCLBuffer"/>
      <param name="blockingWrite" type="CLboolean"/>
      <param name="bufferOrigin" type="sequence&lt;CLuint&gt;"/>
      <param name="srcOrigin" type="sequence&lt;CLuint&gt;"/>
      <param name="region" type="sequence&lt;CLuint&gt;"/>
      <param name="bufferRowPitch" type="CLuint"/>
      <param name="srcCanvas" type="HTMLCanvasElement"/>
      <param name="eventWaitList" type="Optional sequence&lt;WebCLEvent&gt;?"/>
      <param name="event" type="Optional WebCLEvent?"/>
      Enqueue commands to write a rectangular region to a <code>buffer</code> object from <code>srcCanvas</code>.
      <dl class="exceptions">
          <dt>Exceptions:</dt>
	  <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not associated with the same WebCLContext as `buffer`</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not associated with the same WebCLContext as all events in `eventWaitList`</li>
          <li>`INVALID_MEM_OBJECT` -- if `buffer` is not a valid WebCLBuffer object</li>
          <li>`INVALID_VALUE` -- if `bufferOrigin`, `srcOrigin`, or
            `region` does not have exactly three elements</li>
          <li>`INVALID_VALUE` -- if any part of the region being written,
            specified by `bufferOrigin`, `region`, `bufferRowPitch` and
            `bufferSlicePitch`, is out of bounds of `buffer`</li>
          <li>`INVALID_VALUE` -- if any part of the region being
            read, specified by `srcOrigin`, `region`, is out of bounds of `srcCanvas`</li>
          <li>`INVALID_EVENT_WAIT_LIST` -- if any event in `eventWaitList` is invalid</li>
          <li>`EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST` -- if
            `blockingWrite` is `true` and the execution status of any
            event in `eventWaitList` is a negative integer value</li>
	    <li>`INVALID_HOST_PTR` -- if `srcCanvas` object is not fully loaded</li>
        </dl>
    </function>

    <function name="enqueueWriteBufferRect" type="void">
      <param name="buffer" type="WebCLBuffer"/>
      <param name="blockingWrite" type="CLboolean"/>
      <param name="bufferOrigin" type="sequence&lt;CLuint&gt;"/>
      <param name="srcOrigin" type="sequence&lt;CLuint&gt;"/>
      <param name="region" type="sequence&lt;CLuint&gt;"/>
      <param name="bufferRowPitch" type="CLuint"/>
      <param name="srcImage" type="HTMLImageElement"/>
      <param name="eventWaitList" type="Optional sequence&lt;WebCLEvent&gt;?"/>
      <param name="event" type="Optional WebCLEvent?"/>
      Enqueue commands to write a rectangular region to a <code>buffer</code> object from <code>srcImage</code>.
      <dl class="exceptions">
          <dt>Exceptions:</dt>
	  <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not associated with the same WebCLContext as `buffer`</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not associated with the same WebCLContext as all events in `eventWaitList`</li>
          <li>`INVALID_MEM_OBJECT` -- if `buffer` is not a valid WebCLBuffer object</li>
          <li>`INVALID_VALUE` -- if `bufferOrigin`, `srcOrigin`, or
            `region` does not have exactly three elements</li>
          <li>`INVALID_VALUE` -- if any part of the region being written,
            specified by `bufferOrigin`, `region`, `bufferRowPitch` and
            `bufferSlicePitch`, is out of bounds of `buffer`</li>
          <li>`INVALID_VALUE` -- if any part of the region being
            read, specified by `srcOrigin`, `region`, is out of bounds of `srcImage`</li>
          <li>`INVALID_EVENT_WAIT_LIST` -- if any event in `eventWaitList` is invalid</li>
          <li>`EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST` -- if
            `blockingWrite` is `true` and the execution status of any
            event in `eventWaitList` is a negative integer value</li>
	    <li>`INVALID_HOST_PTR` -- if `srcImage` object is not fully loaded</li>
        </dl>
    </function>
    
    <function name="enqueueWriteImage" type="void">
      <param name="image" type="WebCLImage"/>
      <param name="blockingWrite" type="CLboolean"/>
      <param name="origin" type="sequence&lt;CLuint&gt;"/>
      <param name="region" type="sequence&lt;CLuint&gt;"/>
      <param name="srcPixels" type="ImageData"/>
      <param name="eventWaitList" type="optional sequence&lt;WebCLEvent&gt;?"/>
      <param name="event" type="optional WebCLEvent?"/>
      Enqueue commands to write the contents of <code>srcPixels</code> to 2D <code>image</code>.
      <dl class="exceptions">
          <dt>Exceptions:</dt>
	  <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not associated with the same WebCLContext as `image`</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not associated with the same WebCLContext as all events in `eventWaitList`</li>
          <li>`INVALID_MEM_OBJECT` -- if `image` is not a valid WebCLImage object</li>
          <li>`INVALID_IMAGE_SIZE` -- if the image dimensions of `image` are not supported by this WebCLCommandQueue</li>
          <li>`INVALID_VALUE` -- if `origin` or `region` does not have exactly two elements</li>
          <li>`INVALID_VALUE` -- if any part of the region being written, specified by `origin` and `region`, is out of bounds of `image`</li>
          <li>`INVALID_EVENT_WAIT_LIST` -- if any event in `eventWaitList` is invalid</li>
          <li>`EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST` -- if
            `blockingWrite` is `true` and the execution status of any
            event in `eventWaitList`is a negative integer value</li>
	    <li>`INVALID_HOST_PTR` -- if `srcPixels` object is not fully loaded</li>
        </dl>
    </function>
    
    <function name="enqueueWriteImage" type="void">
      <param name="image" type="WebCLImage"/>
      <param name="blockingWrite" type="CLboolean"/>
      <param name="origin" type="sequence&lt;CLuint&gt;"/>
      <param name="region" type="sequence&lt;CLuint&gt;"/>
      <param name="srcCanvas" type="HTMLCanvasElement"/>
      <param name="eventWaitList" type="optional sequence&lt;WebCLEvent&gt;?"/>
      <param name="event" type="optional WebCLEvent?"/>
       Enqueue commands to write the contents of <code>srcCanvas</code> to 2D <code>image</code>.
      <dl class="exceptions">
          <dt>Exceptions:</dt>
	  <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not associated with the same WebCLContext as `image`</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not associated with the same WebCLContext as all events in `eventWaitList`</li>
          <li>`INVALID_MEM_OBJECT` -- if `image` is not a valid WebCLImage object</li>
          <li>`INVALID_IMAGE_SIZE` -- if the image dimensions of `image` are not supported by this WebCLCommandQueue</li>
          <li>`INVALID_VALUE` -- if `origin` or `region` does not have exactly two elements</li>
          <li>`INVALID_VALUE` -- if any part of the region being written, specified by `origin` and `region`, is out of bounds of `image`</li>
          <li>`INVALID_EVENT_WAIT_LIST` -- if any event in `eventWaitList` is invalid</li>
          <li>`EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST` -- if
            `blockingWrite` is `true` and the execution status of any
            event in `eventWaitList`is a negative integer value</li>
	    <li>`INVALID_HOST_PTR` -- if `srcCanvas` object is not fully loaded</li>
        </dl>
    </function>
    
    <function name="enqueueWriteImage" type="void">
      <param name="image" type="WebCLImage"/>
      <param name="blockingWrite" type="CLboolean"/>
      <param name="origin" type="sequence&lt;CLuint&gt;"/>
      <param name="region" type="sequence&lt;CLuint&gt;"/>
      <param name="srcImage" type="HTMLImageElement"/>
      <param name="eventWaitList" type="optional sequence&lt;WebCLEvent&gt;?"/>
      <param name="event" type="optional WebCLEvent?"/>
       Enqueue commands to write the contents of <code>srcImage</code> to 2D <code>image</code>.
      <dl class="exceptions">
          <dt>Exceptions:</dt>
	  <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not associated with the same WebCLContext as `image`</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not associated with the same WebCLContext as all events in `eventWaitList`</li>
          <li>`INVALID_MEM_OBJECT` -- if `image` is not a valid WebCLImage object</li>
          <li>`INVALID_IMAGE_SIZE` -- if the image dimensions of `image` are not supported by this WebCLCommandQueue</li>
          <li>`INVALID_VALUE` -- if `origin` or `region` does not have exactly two elements</li>
          <li>`INVALID_VALUE` -- if any part of the region being written, specified by `origin` and `region`, is out of bounds of `image`</li>
          <li>`INVALID_EVENT_WAIT_LIST` -- if any event in `eventWaitList` is invalid</li>
          <li>`EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST` -- if
            `blockingWrite` is `true` and the execution status of any
            event in `eventWaitList`is a negative integer value</li>
	    <li>`INVALID_HOST_PTR` -- if `srcImage` object is not fully loaded</li>
        </dl>
    </function>

    <function name="enqueueReadBuffer" type="void">
      <param name="buffer" type="WebCLBuffer"/>
      <param name="blockingRead" type="CLboolean"/>
      <param name="bufferOffset" type="CLuint"/>
      <param name="numBytes" type="CLuint"/>
      <param name="dstCanvas" type="HTMLCanvasElement"/>
      <param name="eventWaitList" type="optional sequence&lt;WebCLEvent&gt;"/>
      <param name="event" type="optional WebCLEvent?"/>
      Enqueue commands to read the contents of <code>buffer</code> object to <code>dstCanvas</code>.
      <dl class="exceptions">
          <dt>Exceptions:</dt>
	  <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not
            associated with the same WebCLContext as `buffer`</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not
            associated with the same WebCLContext as all events in
            `eventWaitList`</li>
          <li>`INVALID_MEM_OBJECT` -- if `buffer` is not a valid
            WebCLBuffer object</li>
          <li>`INVALID_VALUE` -- if any part of the region being read,
            specified by `bufferOffset` and `numBytes`, is out of
            bounds of `buffer`</li>
          <li>`INVALID_VALUE` -- if any part of the region being
            written, specified by `dstCanvas` is out of bounds</li>
          <li>`INVALID_EVENT_WAIT_LIST` -- if any event in `eventWaitList` is invalid</li>
          <li>`EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST` -- if
            `blockingRead` is `true` and the execution status of any
            event in `eventWaitList` is a negative integer value</li>
        </dl>
    </function>

     <function name="enqueueReadBufferRect" type="void">
      <param name="buffer" type="WebCLBuffer"/>
      <param name="blockingRead" type="CLboolean"/>
      <param name="bufferOrigin" type="sequence&gt;CLuint&gt;"/>
      <param name="dstOrigin" type="sequence&gt;CLuint&gt;"/>
      <param name="region" type="sequence&gt;CLuint&gt;"/>
      <param name="bufferRowPitch" type="CLuint"/>
      <param name="bufferSlicePitch" type="CLuint"/>
      <param name="dstCanvas" type="HTMLCanvasElement"/>
      <param name="eventWaitList" type="optional sequence&lt;WebCLEvent&gt;"/>
      <param name="event" type="optional WebCLEvent?"/>
      Enqueue commands to read, a rectangular region, from a <code>buffer</code> object to <code>dstCanvas</code>.
       <dl class="exceptions">
          <dt>Exceptions:</dt>
	  <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not associated with the same WebCLContext as `buffer`</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not associated with the same WebCLContext as all events in `eventWaitList`</li>
          <li>`INVALID_MEM_OBJECT` -- if `buffer` is not a valid WebCLBuffer object</li>
          <li>`INVALID_VALUE` -- if `bufferOrigin`, `dstOrigin`, or
            `region` does not have exactly three elements</li>
          <li>`INVALID_VALUE` -- if any part of the region being read,
            specified by `bufferOrigin`, `region`, `bufferRowPitch` and
            `bufferSlicePitch`, is out of bounds of `buffer`</li>
          <li>`INVALID_VALUE` -- if any part of the region being
            written, specified by `dstOrigin`, `region`, is out of bounds of `dstCanvas`</li>
          <li>`INVALID_EVENT_WAIT_LIST` -- if any event in `eventWaitList` is invalid</li>
          <li>`EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST` -- if
            `blockingRead` is `true` and the execution status of any
            event in `eventWaitList` is a negative integer value</li>
        </dl>
    </function>

    <function name="enqueueReadImage" type="void">
      <param name="image" type="WebCLImage"/>
      <param name="origin" type="sequence&lt;CLuint&gt;"/>
      <param name="region" type="sequence&lt;CLuint&gt;"/>
      <param name="dstCanvas" type="HTMLCanvasElement"/>
      <param name="eventWaitList" type="optional sequence&lt;WebCLEvent&gt;"/>
      <param name="event" type="optional WebCLEvent?"/>
      Enqueue commands to read the contents of <code>image</code> object to <code>dstCanvas</code>.
      <dl class="exceptions">
          <dt>Exceptions:</dt>
	  <li>`WEBCL_EXTENSION_NOT_ENABLED` -- if the `WEBCL_html_sharing` extension has not been enabled</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not
            associated with the same WebCLContext as `buffer`</li>
          <li>`INVALID_CONTEXT` -- if this WebCLCommandQueue is not
            associated with the same WebCLContext as all events in
            `eventWaitList`</li>
          <li>`INVALID_MEM_OBJECT` -- if `image` is not a valid
            WebCLImage object</li>
          <li>`INVALID_IMAGE_SIZE` -- if the image dimensions of `image` are not supported by this WebCLCommandQueue</li>
          <li>`INVALID_VALUE` -- if `origin` or `region` does not have exactly two elements</li>
          <li>`INVALID_VALUE` -- if any part of the region being read,
            specified by `origin` and `region`, is out of
            bounds of `image`</li>
          <li>`INVALID_VALUE` -- if any part of the region being
            written, specified by `dstCanvas` is out of bounds</li>
          <li>`INVALID_EVENT_WAIT_LIST` -- if any event in `eventWaitList` is invalid</li>
          <li>`EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST` -- if
            `blockingRead` is `true` and the execution status of any
            event in `eventWaitList` is a negative integer value</li>
        </dl>
    </function>
    

  </newfun>


  <issues>
    <ol>
      <li>
        <p>
         N/A
        </p>
      </li>
    </ol>
  </issues>

  <samplecode xml:space="preserve">
    <pre class="example">
      //example assumes extension has been correctly enabled
      //on platform or device
    </pre>
  </samplecode>

  <history>
    <revision date="2013/11/20">
      <change>Migrated from the WebCL Working Draft</change>
    </revision>
  </history>
</draft>
